/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@welldone-software";
exports.ids = ["vendor-chunks/@welldone-software"];
exports.modules = {

/***/ "(ssr)/./node_modules/@welldone-software/why-did-you-render/dist/whyDidYouRender.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@welldone-software/why-did-you-render/dist/whyDidYouRender.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/**\n * @welldone-software/why-did-you-render 8.0.3\n * MIT Licensed\n * Generated by Vitali Zaidman <vzaidman@gmail.com> (https://github.com/vzaidman)\n * Generated at 2024-06-08\n */\n\n(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\")) :\n  0;\n})(this, (function (React, lodash) { 'use strict';\n\n  function _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () { return e[k]; }\n          });\n        }\n      });\n    }\n    n.default = e;\n    return Object.freeze(n);\n  }\n\n  var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);\n\n  var wdyrStore = {\n    /* The React object we patch */\n    React: undefined,\n    /* Processed user options for WDYR */\n    options: undefined,\n    /* The original React.createElement function */\n    origCreateElement: undefined,\n    /* The original React.createFactory function */\n    origCreateFactory: undefined,\n    /* The original React.cloneElement function */\n    origCloneElement: undefined,\n    /* A weak map of all React elements to their WDYR patched react elements */\n    componentsMap: new WeakMap(),\n    /* A weak map of props to the owner element that passed them */\n    ownerDataMap: new WeakMap(),\n    /* An array of hooks tracked during one render */\n    hooksPerRender: []\n  };\n\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n    return n;\n  }\n  function _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n  }\n  function _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n  }\n  function _assertThisInitialized(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }\n  function _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n  }\n  function _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), e;\n  }\n  function _createForOfIteratorHelper(r, e) {\n    var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (!t) {\n      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e  ) {\n        t && (r = t);\n        var n = 0,\n          F = function () {};\n        return {\n          s: F,\n          n: function () {\n            return n >= r.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: r[n++]\n            };\n          },\n          e: function (r) {\n            throw r;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var o,\n      a = !0,\n      u = !1;\n    return {\n      s: function () {\n        t = t.call(r);\n      },\n      n: function () {\n        var r = t.next();\n        return a = r.done, r;\n      },\n      e: function (r) {\n        u = !0, o = r;\n      },\n      f: function () {\n        try {\n          a || null == t.return || t.return();\n        } finally {\n          if (u) throw o;\n        }\n      }\n    };\n  }\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  function _get() {\n    return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {\n      var p = _superPropBase(e, t);\n      if (p) {\n        var n = Object.getOwnPropertyDescriptor(p, t);\n        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n      }\n    }, _get.apply(null, arguments);\n  }\n  function _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n  }\n  function _inherits(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(t, \"prototype\", {\n      writable: !1\n    }), e && _setPrototypeOf(t, e);\n  }\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function () {\n      return !!t;\n    })();\n  }\n  function _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n  }\n  function _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n      var e,\n        n,\n        i,\n        u,\n        a = [],\n        f = !0,\n        o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) return;\n          f = !1;\n        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return a;\n    }\n  }\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(e);\n      r && (o = o.filter(function (r) {\n        return Object.getOwnPropertyDescriptor(e, r).enumerable;\n      })), t.push.apply(t, o);\n    }\n    return t;\n  }\n  function _objectSpread2(e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = null != arguments[r] ? arguments[r] : {};\n      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n        _defineProperty(e, r, t[r]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n      });\n    }\n    return e;\n  }\n  function _possibleConstructorReturn(t, e) {\n    if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized(t);\n  }\n  function _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n  }\n  function _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n  }\n  function _superPropBase(t, o) {\n    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););\n    return t;\n  }\n  function _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n      var t = {}.toString.call(r).slice(8, -1);\n      return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n  }\n\n  var diffTypes = {\n    'different': 'different',\n    'deepEquals': 'deepEquals',\n    'date': 'date',\n    'regex': 'regex',\n    'reactElement': 'reactElement',\n    'function': 'function',\n    'same': 'same'\n  };\n  var diffTypesDescriptions = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, diffTypes.different, 'different objects'), diffTypes.deepEquals, 'different objects that are equal by value'), diffTypes.date, 'different date objects with the same value'), diffTypes.regex, 'different regular expressions with the same value'), diffTypes.reactElement, 'different React elements (remember that the <jsx/> syntax always produces a *NEW* immutable React element so a component that receives <jsx/> as props always re-renders)'), diffTypes[\"function\"], 'different functions with the same name'), diffTypes.same, 'same objects by ref (===)');\n\n  // copied from packages/shared/ReactSymbols.js in https://github.com/facebook/react\n  var hasSymbol$1 = typeof Symbol === 'function' && Symbol[\"for\"];\n  var REACT_MEMO_TYPE = hasSymbol$1 ? Symbol[\"for\"]('react.memo') : 0xead3;\n  var REACT_FORWARD_REF_TYPE = hasSymbol$1 ? Symbol[\"for\"]('react.forward_ref') : 0xead0;\n  var REACT_STRICT_MODE = 8;\n\n  var hasElementType = typeof Element !== 'undefined';\n\n  // copied from https://github.com/facebook/react/packages/shared/ReactSymbols.js\n  var hasSymbol = typeof Symbol === 'function' && Symbol[\"for\"];\n  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol[\"for\"]('react.element') : 0xeac7;\n  var isReactElement = function isReactElement(object) {\n    return object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n  // end\n\n  function trackDiff(a, b, diffsAccumulator, pathString, diffType) {\n    diffsAccumulator.push({\n      diffType: diffType,\n      pathString: pathString,\n      prevValue: a,\n      nextValue: b\n    });\n    return diffType !== diffTypes.different;\n  }\n  function isGetter(obj, prop) {\n    return !!Object.getOwnPropertyDescriptor(obj, prop)['get'];\n  }\n  var dependenciesMap = new WeakMap();\n  function accumulateDeepEqualDiffs(a, b, diffsAccumulator) {\n    var pathString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var _ref = arguments.length > 4 ? arguments[4] : undefined,\n      detailed = _ref.detailed;\n    if (a === b) {\n      if (detailed) {\n        trackDiff(a, b, diffsAccumulator, pathString, diffTypes.same);\n      }\n      return true;\n    }\n    if (!a || !b) {\n      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n    if (lodash.isArray(a) && lodash.isArray(b)) {\n      var arrayLength = a.length;\n      if (arrayLength !== b.length) {\n        return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.different);\n      }\n      var arrayItemDiffs = [];\n      var numberOfDeepEqualsItems = 0;\n      for (var i = arrayLength; i--; i > 0) {\n        var diffEquals = accumulateDeepEqualDiffs(a[i], b[i], arrayItemDiffs, \"\".concat(pathString, \"[\").concat(i, \"]\"), {\n          detailed: detailed\n        });\n        if (diffEquals) {\n          numberOfDeepEqualsItems++;\n        }\n      }\n      if (detailed || numberOfDeepEqualsItems !== arrayLength) {\n        diffsAccumulator.push.apply(diffsAccumulator, arrayItemDiffs);\n      }\n      if (numberOfDeepEqualsItems === arrayLength) {\n        return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.deepEquals);\n      }\n      return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.different);\n    }\n    if (lodash.isSet(a) && lodash.isSet(b)) {\n      if (a.size !== b.size) {\n        return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.different);\n      }\n      var _iterator = _createForOfIteratorHelper(a),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var valA = _step.value;\n          if (!b.has(valA)) {\n            return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.different);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.deepEquals);\n    }\n    if (lodash.isDate(a) && lodash.isDate(b)) {\n      return a.getTime() === b.getTime() ? trackDiff(new Date(a), new Date(b), diffsAccumulator, pathString, diffTypes.date) : trackDiff(new Date(a), new Date(b), diffsAccumulator, pathString, diffTypes.different);\n    }\n    if (lodash.isRegExp(a) && lodash.isRegExp(b)) {\n      return a.toString() === b.toString() ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes.regex) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n    if (hasElementType && a instanceof Element && b instanceof Element) {\n      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n    if (isReactElement(a) && isReactElement(b)) {\n      if (a.type !== b.type) {\n        return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n      }\n      var reactElementPropsAreDeepEqual = accumulateDeepEqualDiffs(a.props, b.props, [], \"\".concat(pathString, \".props\"), {\n        detailed: detailed\n      });\n      return reactElementPropsAreDeepEqual ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes.reactElement) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n    if (lodash.isFunction(a) && lodash.isFunction(b)) {\n      if (a.name !== b.name) {\n        return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n      }\n      var aDependenciesObj = dependenciesMap.get(a);\n      var bDependenciesObj = dependenciesMap.get(b);\n      if (aDependenciesObj && bDependenciesObj) {\n        var dependenciesAreDeepEqual = accumulateDeepEqualDiffs(aDependenciesObj.deps, bDependenciesObj.deps, diffsAccumulator, \"\".concat(pathString, \":parent-hook-\").concat(aDependenciesObj.hookName, \"-deps\"), {\n          detailed: detailed\n        });\n        return dependenciesAreDeepEqual ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes[\"function\"]) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n      }\n      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes[\"function\"]);\n    }\n    if (_typeof(a) === 'object' && _typeof(b) === 'object' && Object.getPrototypeOf(a) === Object.getPrototypeOf(b)) {\n      var aKeys = Object.getOwnPropertyNames(a);\n      var bKeys = Object.getOwnPropertyNames(b);\n      var allKeys = lodash.uniq([].concat(_toConsumableArray(aKeys), _toConsumableArray(bKeys)));\n      var clonedA = lodash.isPlainObject(a) ? _objectSpread2({}, a) : a;\n      var clonedB = lodash.isPlainObject(b) ? _objectSpread2({}, b) : b;\n      if (allKeys.length !== aKeys.length || allKeys.length !== bKeys.length) {\n        return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.different);\n      }\n      var relevantKeys = allKeys.filter(function (key) {\n        // do not compare the stack as it differ even though the errors are identical.\n        if (key === 'stack' && lodash.isError(a)) {\n          return false;\n        }\n\n        // getters checking is causing too much problems because of how it's used in js.\n        // not only getters can throw errors, they also cause side effects in many cases.\n        if (isGetter(a, key)) {\n          return false;\n        }\n        return true;\n      });\n      var keysLength = relevantKeys.length;\n      for (var _i = keysLength; _i--; _i > 0) {\n        if (!lodash.has(b, relevantKeys[_i])) {\n          return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.different);\n        }\n      }\n      var objectValuesDiffs = [];\n      var numberOfDeepEqualsObjectValues = 0;\n      for (var _i2 = keysLength; _i2--; _i2 > 0) {\n        var key = relevantKeys[_i2];\n        var deepEquals = accumulateDeepEqualDiffs(a[key], b[key], objectValuesDiffs, \"\".concat(pathString, \".\").concat(key), {\n          detailed: detailed\n        });\n        if (deepEquals) {\n          numberOfDeepEqualsObjectValues++;\n        }\n      }\n      if (detailed || numberOfDeepEqualsObjectValues !== keysLength) {\n        diffsAccumulator.push.apply(diffsAccumulator, objectValuesDiffs);\n      }\n      if (numberOfDeepEqualsObjectValues === keysLength) {\n        return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.deepEquals);\n      }\n      return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.different);\n    }\n    return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n  }\n  function calculateDeepEqualDiffs(a, b, initialPathString) {\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref2$detailed = _ref2.detailed,\n      detailed = _ref2$detailed === void 0 ? false : _ref2$detailed;\n    try {\n      var diffs = [];\n      accumulateDeepEqualDiffs(a, b, diffs, initialPathString, {\n        detailed: detailed\n      });\n      return diffs;\n    } catch (error) {\n      if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {\n        // warn on circular references, don't crash.\n        // browsers throw different errors name and messages:\n        // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n        // firefox: \"InternalError\", too much recursion\"\n        // edge: \"Error\", \"Out of stack space\"\n        // eslint-disable-next-line no-console\n        console.warn('Warning: why-did-you-render couldn\\'t handle circular references in props.', error.name, error.message);\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  function printDiff(value1, value2, _ref) {\n    var pathString = _ref.pathString,\n      consoleLog = _ref.consoleLog;\n    var diffs = calculateDeepEqualDiffs(value1, value2, pathString, {\n      detailed: true\n    });\n    var keysLength = Math.max.apply(Math, _toConsumableArray(diffs.map(function (diff) {\n      return diff.pathString.length;\n    }))) + 2;\n    Object.entries(lodash.groupBy(lodash.sortBy(diffs, 'pathString'), 'diffType')).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        diffType = _ref3[0],\n        diffs = _ref3[1];\n      consoleLog(\"%c\".concat(diffTypesDescriptions[diffType], \":\"), 'text-decoration: underline; color: blue;');\n      diffs.forEach(function (diff) {\n        consoleLog(\"\".concat(diff.pathString, \":\").padEnd(keysLength, ' '), diff.prevValue);\n      });\n    });\n  }\n\n  var moreInfoUrl = 'http://bit.ly/wdyr02';\n  var moreInfoHooksUrl = 'http://bit.ly/wdyr3';\n  var inHotReload = false;\n  function shouldLog(reason, Component) {\n    if (inHotReload) {\n      return false;\n    }\n    if (wdyrStore.options.logOnDifferentValues) {\n      return true;\n    }\n    if (Component.whyDidYouRender && Component.whyDidYouRender.logOnDifferentValues) {\n      return true;\n    }\n    var hasDifferentValues = reason.propsDifferences && reason.propsDifferences.some(function (diff) {\n      return diff.diffType === diffTypes.different;\n    }) || reason.stateDifferences && reason.stateDifferences.some(function (diff) {\n      return diff.diffType === diffTypes.different;\n    }) || reason.hookDifferences && reason.hookDifferences.some(function (diff) {\n      return diff.diffType === diffTypes.different;\n    });\n    return !hasDifferentValues;\n  }\n  function logDifference(_ref) {\n    var Component = _ref.Component,\n      displayName = _ref.displayName,\n      hookName = _ref.hookName,\n      prefixMessage = _ref.prefixMessage,\n      diffObjType = _ref.diffObjType,\n      differences = _ref.differences,\n      values = _ref.values;\n    if (differences && differences.length > 0) {\n      wdyrStore.options.consoleLog(_defineProperty({}, displayName, Component), \"\".concat(prefixMessage, \" of \").concat(diffObjType, \" changes:\"));\n      differences.forEach(function (_ref2) {\n        var pathString = _ref2.pathString,\n          diffType = _ref2.diffType,\n          prevValue = _ref2.prevValue,\n          nextValue = _ref2.nextValue;\n        function diffFn() {\n          printDiff(prevValue, nextValue, {\n            pathString: pathString,\n            consoleLog: wdyrStore.options.consoleLog\n          });\n        }\n        wdyrStore.options.consoleGroup(\"%c\".concat(diffObjType === 'hook' ? \"[hook \".concat(hookName, \" result]\") : \"\".concat(diffObjType, \".\"), \"%c\").concat(pathString, \"%c\"), \"color:\".concat(wdyrStore.options.diffNameColor, \";\"), \"color:\".concat(wdyrStore.options.diffPathColor, \";\"), 'color:default;');\n        wdyrStore.options.consoleLog(\"\".concat(diffTypesDescriptions[diffType], \". (more info at \").concat(hookName ? moreInfoHooksUrl : moreInfoUrl, \")\"));\n        wdyrStore.options.consoleLog(_defineProperty({}, \"prev \".concat(pathString), prevValue), '!==', _defineProperty({}, \"next \".concat(pathString), nextValue));\n        if (diffType === diffTypes.deepEquals) {\n          wdyrStore.options.consoleLog({\n            'For detailed diff, right click the following fn, save as global, and run: ': diffFn\n          });\n        }\n        wdyrStore.options.consoleGroupEnd();\n      });\n    } else if (differences) {\n      wdyrStore.options.consoleLog(_defineProperty({}, displayName, Component), \"\".concat(prefixMessage, \" the \").concat(diffObjType, \" object itself changed but its values are all equal.\"), diffObjType === 'props' ? 'This could have been avoided by making the component pure, or by preventing its father from re-rendering.' : 'This usually means this component called setState when no changes in its state actually occurred.', \"More info at \".concat(moreInfoUrl));\n      wdyrStore.options.consoleLog(\"prev \".concat(diffObjType, \":\"), values.prev, ' !== ', values.next, \":next \".concat(diffObjType));\n    }\n  }\n  function defaultNotifier(updateInfo) {\n    var Component = updateInfo.Component,\n      displayName = updateInfo.displayName,\n      hookName = updateInfo.hookName,\n      prevProps = updateInfo.prevProps,\n      prevState = updateInfo.prevState,\n      prevHook = updateInfo.prevHook,\n      nextProps = updateInfo.nextProps,\n      nextState = updateInfo.nextState,\n      nextHook = updateInfo.nextHook,\n      reason = updateInfo.reason;\n    if (!shouldLog(reason, Component, wdyrStore.options)) {\n      return;\n    }\n    wdyrStore.options.consoleGroup(\"%c\".concat(displayName), \"color: \".concat(wdyrStore.options.titleColor, \";\"));\n    var prefixMessage = 'Re-rendered because';\n    if (reason.propsDifferences) {\n      logDifference({\n        Component: Component,\n        displayName: displayName,\n        prefixMessage: prefixMessage,\n        diffObjType: 'props',\n        differences: reason.propsDifferences,\n        values: {\n          prev: prevProps,\n          next: nextProps\n        }\n      });\n      prefixMessage = 'And because';\n    }\n    if (reason.stateDifferences) {\n      logDifference({\n        Component: Component,\n        displayName: displayName,\n        prefixMessage: prefixMessage,\n        diffObjType: 'state',\n        differences: reason.stateDifferences,\n        values: {\n          prev: prevState,\n          next: nextState\n        }\n      });\n    }\n    if (reason.hookDifferences) {\n      logDifference({\n        Component: Component,\n        displayName: displayName,\n        prefixMessage: prefixMessage,\n        diffObjType: 'hook',\n        differences: reason.hookDifferences,\n        values: {\n          prev: prevHook,\n          next: nextHook\n        },\n        hookName: hookName\n      });\n    }\n    if (reason.propsDifferences && reason.ownerDifferences) {\n      var prevOwnerData = wdyrStore.ownerDataMap.get(prevProps);\n      var nextOwnerData = wdyrStore.ownerDataMap.get(nextProps);\n      wdyrStore.options.consoleGroup(\"Rendered by \".concat(nextOwnerData.displayName));\n      var _prefixMessage = 'Re-rendered because';\n      if (reason.ownerDifferences.propsDifferences) {\n        logDifference({\n          Component: nextOwnerData.Component,\n          displayName: nextOwnerData.displayName,\n          prefixMessage: _prefixMessage,\n          diffObjType: 'props',\n          differences: reason.ownerDifferences.propsDifferences,\n          values: {\n            prev: prevOwnerData.props,\n            next: nextOwnerData.props\n          }\n        });\n        _prefixMessage = 'And because';\n      }\n      if (reason.ownerDifferences.stateDifferences) {\n        logDifference({\n          Component: nextOwnerData.Component,\n          displayName: nextOwnerData.displayName,\n          prefixMessage: _prefixMessage,\n          diffObjType: 'state',\n          differences: reason.ownerDifferences.stateDifferences,\n          values: {\n            prev: prevOwnerData.state,\n            next: nextOwnerData.state\n          }\n        });\n      }\n      if (reason.ownerDifferences.hookDifferences) {\n        reason.ownerDifferences.hookDifferences.forEach(function (_ref3, i) {\n          var hookName = _ref3.hookName,\n            differences = _ref3.differences;\n          return logDifference({\n            Component: nextOwnerData.Component,\n            displayName: nextOwnerData.displayName,\n            prefixMessage: _prefixMessage,\n            diffObjType: 'hook',\n            differences: differences,\n            values: {\n              prev: prevOwnerData.hooks[i].result,\n              next: nextOwnerData.hooks[i].result\n            },\n            hookName: hookName\n          });\n        });\n      }\n      wdyrStore.options.consoleGroupEnd();\n    }\n    if (!reason.propsDifferences && !reason.stateDifferences && !reason.hookDifferences) {\n      wdyrStore.options.consoleLog(_defineProperty({}, displayName, Component), 'Re-rendered although props and state objects are the same.', 'This usually means there was a call to this.forceUpdate() inside the component.', \"more info at \".concat(moreInfoUrl));\n    }\n    wdyrStore.options.consoleGroupEnd();\n  }\n  function createDefaultNotifier(hotReloadBufferMs) {\n    if (hotReloadBufferMs) {\n      if (false) {}\n    }\n    return defaultNotifier;\n  }\n\n  var emptyFn = function emptyFn() {};\n  function normalizeOptions() {\n    var userOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var consoleGroup = console.group;\n    var consoleGroupEnd = console.groupEnd;\n    if (userOptions.collapseGroups) {\n      consoleGroup = console.groupCollapsed;\n    } else if (userOptions.onlyLogs) {\n      consoleGroup = console.log;\n      consoleGroupEnd = emptyFn;\n    }\n    var notifier = userOptions.notifier || createDefaultNotifier('hotReloadBufferMs' in userOptions ? userOptions.hotReloadBufferMs : 500);\n    return _objectSpread2({\n      include: null,\n      exclude: null,\n      notifier: notifier,\n      onlyLogs: false,\n      consoleLog: console.log,\n      consoleGroup: consoleGroup,\n      consoleGroupEnd: consoleGroupEnd,\n      logOnDifferentValues: false,\n      logOwnerReasons: true,\n      trackHooks: true,\n      titleColor: '#058',\n      diffNameColor: 'blue',\n      diffPathColor: 'red',\n      trackExtraHooks: [],\n      trackAllPureComponents: false\n    }, userOptions);\n  }\n\n  function getDisplayName(type) {\n    return type.displayName || type.name || type.type && getDisplayName(type.type) || type.render && getDisplayName(type.render) || (lodash.isString(type) ? type : 'Unknown');\n  }\n\n  function getDefaultProps(type) {\n    return type.defaultProps || type.type && getDefaultProps(type.type) || type.render && getDefaultProps(type.render) || undefined;\n  }\n\n  var emptyObject = {};\n  function findObjectsDifferences(userPrevObj, userNextObj) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$shallow = _ref.shallow,\n      shallow = _ref$shallow === void 0 ? true : _ref$shallow;\n    if (userPrevObj === userNextObj) {\n      return false;\n    }\n    if (!shallow) {\n      return calculateDeepEqualDiffs(userPrevObj, userNextObj);\n    }\n    var prevObj = userPrevObj || emptyObject;\n    var nextObj = userNextObj || emptyObject;\n    var keysOfBothObjects = Object.keys(_objectSpread2(_objectSpread2({}, prevObj), nextObj));\n    return lodash.reduce(keysOfBothObjects, function (result, key) {\n      var deepEqualDiffs = calculateDeepEqualDiffs(prevObj[key], nextObj[key], key);\n      if (deepEqualDiffs) {\n        result = [].concat(_toConsumableArray(result), _toConsumableArray(deepEqualDiffs));\n      }\n      return result;\n    }, []);\n  }\n\n  function getOwnerDifferences(_ref) {\n    var prevOwnerData = _ref.prevOwnerData,\n      nextOwnerData = _ref.nextOwnerData;\n    if (!prevOwnerData || !nextOwnerData) {\n      return false;\n    }\n\n    // in strict mode prevOwnerData might be twice as lengthy because of double renders\n    var prevOwnerDataHooks = prevOwnerData.hooks.length === nextOwnerData.hooks.length * 2 ? prevOwnerData.hooks.slice(prevOwnerData.hooks.length / 2) : prevOwnerData.hooks;\n    var hookDifferences = prevOwnerDataHooks.map(function (_ref2, i) {\n      var hookName = _ref2.hookName,\n        result = _ref2.result;\n      return {\n        hookName: hookName,\n        differences: findObjectsDifferences(result, nextOwnerData.hooks[i].result, {\n          shallow: false\n        })\n      };\n    });\n    return {\n      propsDifferences: findObjectsDifferences(prevOwnerData.props, nextOwnerData.props),\n      stateDifferences: findObjectsDifferences(prevOwnerData.state, nextOwnerData.state),\n      hookDifferences: hookDifferences.length > 0 ? hookDifferences : false\n    };\n  }\n  function getUpdateReason(prevProps, prevState, prevHook, nextProps, nextState, nextHook) {\n    var prevOwnerData = wdyrStore.ownerDataMap.get(prevProps);\n    var nextOwnerData = wdyrStore.ownerDataMap.get(nextProps);\n    return {\n      propsDifferences: findObjectsDifferences(prevProps, nextProps),\n      stateDifferences: findObjectsDifferences(prevState, nextState),\n      hookDifferences: findObjectsDifferences(prevHook, nextHook, {\n        shallow: false\n      }),\n      ownerDifferences: getOwnerDifferences({\n        prevOwnerData: prevOwnerData,\n        nextOwnerData: nextOwnerData\n      })\n    };\n  }\n  function getUpdateInfo(_ref3) {\n    var Component = _ref3.Component,\n      displayName = _ref3.displayName,\n      hookName = _ref3.hookName,\n      prevProps = _ref3.prevProps,\n      prevState = _ref3.prevState,\n      prevHook = _ref3.prevHook,\n      nextProps = _ref3.nextProps,\n      nextState = _ref3.nextState,\n      nextHook = _ref3.nextHook;\n    return {\n      Component: Component,\n      displayName: displayName,\n      hookName: hookName,\n      prevProps: prevProps,\n      prevState: prevState,\n      prevHook: prevHook,\n      nextProps: nextProps,\n      nextState: nextState,\n      nextHook: nextHook,\n      reason: getUpdateReason(prevProps, prevState, prevHook, nextProps, nextState, nextHook)\n    };\n  }\n\n  // copied from https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactTypeOfMode.js\n\n  // based on \"findStrictRoot\" from https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactStrictModeWarnings.js\n  // notice: this is only used for class components. functional components doesn't render twice inside strict mode\n  function checkIfInsideAStrictModeTree(reactComponentInstance) {\n    var reactInternalFiber = reactComponentInstance && (reactComponentInstance._reactInternalFiber || reactComponentInstance._reactInternals);\n    while (reactInternalFiber) {\n      if (reactInternalFiber.mode & REACT_STRICT_MODE) {\n        return true;\n      }\n      reactInternalFiber = reactInternalFiber[\"return\"];\n    }\n    return false;\n  }\n  function isReactClassComponent(Component) {\n    return Component.prototype && !!Component.prototype.isReactComponent;\n  }\n  function isMemoComponent(Component) {\n    return Component.$$typeof === REACT_MEMO_TYPE;\n  }\n  function isForwardRefComponent(Component) {\n    return Component.$$typeof === REACT_FORWARD_REF_TYPE;\n  }\n\n  function shouldInclude(displayName) {\n    return wdyrStore.options.include && wdyrStore.options.include.length > 0 && wdyrStore.options.include.some(function (regex) {\n      return regex.test(displayName);\n    });\n  }\n  function shouldExclude(displayName) {\n    return wdyrStore.options.exclude && wdyrStore.options.exclude.length > 0 && wdyrStore.options.exclude.some(function (regex) {\n      return regex.test(displayName);\n    });\n  }\n  function shouldTrack(Component, _ref) {\n    var isHookChange = _ref.isHookChange;\n    var displayName = getDisplayName(Component);\n    if (shouldExclude(displayName)) {\n      return false;\n    }\n    if (Component.whyDidYouRender === false) {\n      return false;\n    }\n    if (isHookChange && Component.whyDidYouRender && Component.whyDidYouRender.trackHooks === false) {\n      return false;\n    }\n    return !!(Component.whyDidYouRender || wdyrStore.options.trackAllPureComponents && (Component && Component.prototype instanceof wdyrStore.React.PureComponent || isMemoComponent(Component)) || shouldInclude(displayName));\n  }\n\n  function patchClassComponent(ClassComponent, _ref) {\n    var displayName = _ref.displayName,\n      defaultProps = _ref.defaultProps;\n    var WDYRPatchedClassComponent = /*#__PURE__*/function (_ClassComponent) {\n      function WDYRPatchedClassComponent(props, context) {\n        var _this;\n        _classCallCheck(this, WDYRPatchedClassComponent);\n        _this = _callSuper(this, WDYRPatchedClassComponent, [props, context]);\n        _this._WDYR = {\n          renderNumber: 0\n        };\n        var origRender = _get((_getPrototypeOf(WDYRPatchedClassComponent.prototype)), \"render\", _this) || _this.render;\n\n        // this probably means that render is an arrow function or this.render.bind(this) was called on the original class\n        var renderIsABindedFunction = origRender !== ClassComponent.prototype.render;\n        if (renderIsABindedFunction) {\n          _this.render = function () {\n            WDYRPatchedClassComponent.prototype.render.apply(_this);\n            return origRender();\n          };\n        }\n        return _this;\n      }\n      _inherits(WDYRPatchedClassComponent, _ClassComponent);\n      return _createClass(WDYRPatchedClassComponent, [{\n        key: \"render\",\n        value: function render() {\n          this._WDYR.renderNumber++;\n          if (!('isStrictMode' in this._WDYR)) {\n            this._WDYR.isStrictMode = checkIfInsideAStrictModeTree(this);\n          }\n\n          // in strict mode- ignore every other render\n          if (!(this._WDYR.isStrictMode && this._WDYR.renderNumber % 2 === 1)) {\n            if (this._WDYR.prevProps) {\n              var updateInfo = getUpdateInfo({\n                Component: ClassComponent,\n                displayName: displayName,\n                prevProps: this._WDYR.prevProps,\n                prevState: this._WDYR.prevState,\n                nextProps: this.props,\n                nextState: this.state\n              });\n              wdyrStore.options.notifier(updateInfo);\n            }\n            this._WDYR.prevProps = this.props;\n            this._WDYR.prevState = this.state;\n          }\n          return _get(_getPrototypeOf(WDYRPatchedClassComponent.prototype), \"render\", this) ? _get(_getPrototypeOf(WDYRPatchedClassComponent.prototype), \"render\", this).call(this) : null;\n        }\n      }]);\n    }(ClassComponent);\n    try {\n      WDYRPatchedClassComponent.displayName = displayName;\n    } catch (e) {\n      // not crucial if displayName couldn't be set\n    }\n    WDYRPatchedClassComponent.defaultProps = defaultProps;\n    lodash.defaults(WDYRPatchedClassComponent, ClassComponent);\n    return WDYRPatchedClassComponent;\n  }\n\n  var getFunctionalComponentFromStringComponent = function getFunctionalComponentFromStringComponent(componentTypeStr) {\n    return function (props) {\n      return wdyrStore.React.createElement(componentTypeStr, props);\n    };\n  };\n  function patchFunctionalOrStrComponent(FunctionalOrStringComponent, _ref) {\n    var isPure = _ref.isPure,\n      displayName = _ref.displayName,\n      defaultProps = _ref.defaultProps;\n    var FunctionalComponent = typeof FunctionalOrStringComponent === 'string' ? getFunctionalComponentFromStringComponent(FunctionalOrStringComponent) : FunctionalOrStringComponent;\n    function WDYRFunctionalComponent() {\n      var nextProps = arguments[0];\n      var ref = wdyrStore.React.useRef();\n      var prevProps = ref.current;\n      ref.current = nextProps;\n      if (prevProps) {\n        var updateInfo = getUpdateInfo({\n          Component: FunctionalComponent,\n          displayName: displayName,\n          prevProps: prevProps,\n          nextProps: nextProps\n        });\n        var notifiedByHooks = !updateInfo.reason.propsDifferences || isPure && updateInfo.reason.propsDifferences.length === 0;\n        if (!notifiedByHooks) {\n          wdyrStore.options.notifier(updateInfo);\n        }\n      }\n      return FunctionalComponent.apply(void 0, arguments);\n    }\n    try {\n      WDYRFunctionalComponent.displayName = displayName;\n    } catch (e) {\n      // not crucial if displayName couldn't be set\n    }\n    WDYRFunctionalComponent.defaultProps = defaultProps;\n    WDYRFunctionalComponent.ComponentForHooksTracking = FunctionalComponent;\n    lodash.defaults(WDYRFunctionalComponent, FunctionalComponent);\n    return WDYRFunctionalComponent;\n  }\n\n  function patchMemoComponent(MemoComponent, _ref) {\n    var displayName = _ref.displayName,\n      defaultProps = _ref.defaultProps;\n    var InnerMemoComponent = MemoComponent.type;\n    var isInnerMemoComponentAClassComponent = isReactClassComponent(InnerMemoComponent);\n    var isInnerMemoComponentForwardRefs = isForwardRefComponent(InnerMemoComponent);\n    var isInnerMemoComponentAnotherMemoComponent = isMemoComponent(InnerMemoComponent);\n    var WrappedFunctionalComponent = isInnerMemoComponentForwardRefs ? InnerMemoComponent.render : InnerMemoComponent;\n    var PatchedInnerComponent = isInnerMemoComponentAClassComponent ? patchClassComponent(WrappedFunctionalComponent, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    }) : isInnerMemoComponentAnotherMemoComponent ? patchMemoComponent(WrappedFunctionalComponent, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    }) : patchFunctionalOrStrComponent(WrappedFunctionalComponent, {\n      displayName: displayName,\n      isPure: true\n    });\n    try {\n      PatchedInnerComponent.displayName = getDisplayName(WrappedFunctionalComponent);\n    } catch (e) {\n      // not crucial if displayName couldn't be set\n    }\n    PatchedInnerComponent.ComponentForHooksTracking = MemoComponent;\n    lodash.defaults(PatchedInnerComponent, WrappedFunctionalComponent);\n    var WDYRMemoizedFunctionalComponent = wdyrStore.React.memo(isInnerMemoComponentForwardRefs ? wdyrStore.React.forwardRef(PatchedInnerComponent) : PatchedInnerComponent, MemoComponent.compare);\n    try {\n      WDYRMemoizedFunctionalComponent.displayName = displayName;\n    } catch (e) {\n      // not crucial if displayName couldn't be set\n    }\n    WDYRMemoizedFunctionalComponent.defaultProps = defaultProps;\n    lodash.defaults(WDYRMemoizedFunctionalComponent, MemoComponent);\n    return WDYRMemoizedFunctionalComponent;\n  }\n\n  function patchForwardRefComponent(ForwardRefComponent, _ref) {\n    var displayName = _ref.displayName,\n      defaultProps = _ref.defaultProps;\n    var InnerForwardRefComponent = ForwardRefComponent.render;\n    var isInnerComponentMemoized = isMemoComponent(InnerForwardRefComponent);\n    var WrappedFunctionalComponent = isInnerComponentMemoized ? InnerForwardRefComponent.type : InnerForwardRefComponent;\n    var WDYRWrappedByReactForwardRefFunctionalComponent = patchFunctionalOrStrComponent(WrappedFunctionalComponent, {\n      isPure: isInnerComponentMemoized,\n      displayName: displayName\n    });\n    WDYRWrappedByReactForwardRefFunctionalComponent.displayName = getDisplayName(WrappedFunctionalComponent);\n    WDYRWrappedByReactForwardRefFunctionalComponent.ComponentForHooksTracking = WrappedFunctionalComponent;\n    lodash.defaults(WDYRWrappedByReactForwardRefFunctionalComponent, WrappedFunctionalComponent);\n    var WDYRForwardRefFunctionalComponent = wdyrStore.React.forwardRef(isInnerComponentMemoized ? wdyrStore.React.memo(WDYRWrappedByReactForwardRefFunctionalComponent, InnerForwardRefComponent.compare) : WDYRWrappedByReactForwardRefFunctionalComponent);\n    try {\n      WDYRForwardRefFunctionalComponent.displayName = displayName;\n    } catch (e) {\n      // not crucial if displayName couldn't be set\n    }\n    WDYRForwardRefFunctionalComponent.defaultProps = defaultProps;\n    lodash.defaults(WDYRForwardRefFunctionalComponent, ForwardRefComponent);\n    return WDYRForwardRefFunctionalComponent;\n  }\n\n  var initialHookValue = Symbol('initial-hook-value');\n  function trackHookChanges(hookName, _ref, hookResult) {\n    var hookPath = _ref.path;\n    var nextHook = hookPath ? lodash.get(hookResult, hookPath) : hookResult;\n    var renderNumberForTheHook = wdyrStore.React.useRef(true);\n\n    // TODO: improve\n    var isSecondCycleOfRenders = wdyrStore.hooksPerRender[0] && wdyrStore.hooksPerRender[0].renderNumberForTheHook !== renderNumberForTheHook.current;\n    if (isSecondCycleOfRenders) {\n      wdyrStore.hooksPerRender = [];\n    }\n    wdyrStore.hooksPerRender.push({\n      hookName: hookName,\n      result: nextHook,\n      renderNumberForTheHook: renderNumberForTheHook.current\n    });\n    renderNumberForTheHook.current++;\n    var ComponentHookDispatchedFromInstance = wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;\n    var prevHookRef = wdyrStore.React.useRef(initialHookValue);\n    if (!ComponentHookDispatchedFromInstance) {\n      return hookResult;\n    }\n    var Component = ComponentHookDispatchedFromInstance.type.ComponentForHooksTracking || ComponentHookDispatchedFromInstance.type;\n    var displayName = getDisplayName(Component);\n    var isShouldTrack = shouldTrack(Component, {\n      isHookChange: true\n    });\n    if (!isShouldTrack) {\n      return hookResult;\n    }\n    var newPrevHookRef = prevHookRef.current;\n    prevHookRef.current = hookResult;\n    if (newPrevHookRef !== initialHookValue) {\n      var notification = getUpdateInfo({\n        Component: Component,\n        displayName: displayName,\n        hookName: hookName,\n        prevHook: hookPath ? lodash.get(newPrevHookRef, hookPath) : newPrevHookRef,\n        nextHook: nextHook\n      });\n      if (notification.reason.hookDifferences) {\n        wdyrStore.options.notifier(notification);\n      }\n    }\n    return hookResult;\n  }\n  function createPatchedComponent(Component, _ref2) {\n    var displayName = _ref2.displayName,\n      defaultProps = _ref2.defaultProps;\n    if (isMemoComponent(Component)) {\n      return patchMemoComponent(Component, {\n        displayName: displayName,\n        defaultProps: defaultProps\n      });\n    }\n    if (isForwardRefComponent(Component)) {\n      return patchForwardRefComponent(Component, {\n        displayName: displayName,\n        defaultProps: defaultProps\n      });\n    }\n    if (isReactClassComponent(Component)) {\n      return patchClassComponent(Component, {\n        displayName: displayName,\n        defaultProps: defaultProps\n      });\n    }\n    return patchFunctionalOrStrComponent(Component, {\n      displayName: displayName,\n      defaultProps: defaultProps,\n      isPure: false\n    });\n  }\n  function getPatchedComponent(Component, _ref3) {\n    var displayName = _ref3.displayName,\n      defaultProps = _ref3.defaultProps;\n    if (wdyrStore.componentsMap.has(Component)) {\n      return wdyrStore.componentsMap.get(Component);\n    }\n    var WDYRPatchedComponent = createPatchedComponent(Component, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    });\n    wdyrStore.componentsMap.set(Component, WDYRPatchedComponent);\n    return WDYRPatchedComponent;\n  }\n  function getIsSupportedComponentType(Comp) {\n    if (!Comp) {\n      return false;\n    }\n    if (isMemoComponent(Comp)) {\n      return getIsSupportedComponentType(Comp.type);\n    }\n    if (isForwardRefComponent(Comp)) {\n      return getIsSupportedComponentType(Comp.render);\n    }\n    if (typeof Comp === 'function') {\n      return true;\n    }\n  }\n  var hooksConfig = {\n    useState: {\n      path: '0'\n    },\n    useReducer: {\n      path: '0'\n    },\n    useContext: undefined,\n    useSyncExternalStore: undefined,\n    useMemo: {\n      dependenciesPath: '1',\n      dontReport: true\n    },\n    useCallback: {\n      dependenciesPath: '1',\n      dontReport: true\n    }\n  };\n  function storeOwnerData(element) {\n    var OwnerInstance = wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;\n    if (OwnerInstance) {\n      var Component = OwnerInstance.type.ComponentForHooksTracking || OwnerInstance.type;\n      var displayName = getDisplayName(Component);\n      var additionalOwnerData = {};\n      if (wdyrStore.options.getAdditionalOwnerData) {\n        additionalOwnerData = wdyrStore.options.getAdditionalOwnerData(element);\n      }\n      wdyrStore.ownerDataMap.set(element.props, {\n        Component: Component,\n        displayName: displayName,\n        props: OwnerInstance.pendingProps,\n        state: OwnerInstance.stateNode ? OwnerInstance.stateNode.state : null,\n        hooks: wdyrStore.hooksPerRender,\n        additionalOwnerData: additionalOwnerData\n      });\n    }\n  }\n  function resetHooksPerRenderIfNeeded() {\n    // Intercept assignments to ReactCurrentOwner.current to reset hooksPerRender\n    var currentOwner = null;\n    if (wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) {\n      Object.defineProperty(wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, 'current', {\n        get: function get() {\n          return currentOwner;\n        },\n        set: function set(value) {\n          currentOwner = value;\n          wdyrStore.hooksPerRender = [];\n        }\n      });\n    }\n  }\n  function trackHooksIfNeeded() {\n    var hooksSupported = !!wdyrStore.React.useState;\n    if (wdyrStore.options.trackHooks && hooksSupported) {\n      var nativeHooks = Object.entries(hooksConfig).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          hookName = _ref5[0],\n          hookTrackingConfig = _ref5[1];\n        return [wdyrStore.React, hookName, hookTrackingConfig];\n      });\n      var hooksToTrack = [].concat(_toConsumableArray(nativeHooks), _toConsumableArray(wdyrStore.options.trackExtraHooks));\n      hooksToTrack.forEach(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 3),\n          hookParent = _ref7[0],\n          hookName = _ref7[1],\n          _ref7$ = _ref7[2],\n          hookTrackingConfig = _ref7$ === void 0 ? {} : _ref7$;\n        var originalHook = hookParent[hookName];\n        var newHookName = hookName[0].toUpperCase() + hookName.slice(1);\n        var newHook = function WhyDidYouRenderReWrittenHook() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          var hookResult = originalHook.call.apply(originalHook, [this].concat(args));\n          var dependenciesPath = hookTrackingConfig.dependenciesPath,\n            dontReport = hookTrackingConfig.dontReport;\n          if (dependenciesPath && lodash.isFunction(hookResult)) {\n            dependenciesMap.set(hookResult, {\n              hookName: hookName,\n              deps: lodash.get(args, dependenciesPath)\n            });\n          }\n          if (!dontReport) {\n            trackHookChanges(hookName, hookTrackingConfig, hookResult);\n          }\n          return hookResult;\n        };\n        Object.defineProperty(newHook, 'name', {\n          value: newHookName,\n          writable: false\n        });\n        Object.assign(newHook, {\n          originalHook: originalHook\n        });\n        hookParent[hookName] = newHook;\n      });\n    }\n  }\n  function getWDYRType(origType) {\n    var isShouldTrack = getIsSupportedComponentType(origType) && shouldTrack(origType, {\n      isHookChange: false\n    });\n    if (!isShouldTrack) {\n      return null;\n    }\n    var displayName = origType && origType.whyDidYouRender && origType.whyDidYouRender.customName || getDisplayName(origType);\n    var defaultProps = getDefaultProps(origType);\n    var WDYRPatchedComponent = getPatchedComponent(origType, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    });\n    return WDYRPatchedComponent;\n  }\n  function whyDidYouRender(React, userOptions) {\n    if (React.__IS_WDYR__) {\n      return;\n    }\n    React.__IS_WDYR__ = true;\n    Object.assign(wdyrStore, {\n      React: React,\n      options: normalizeOptions(userOptions),\n      origCreateElement: React.createElement,\n      origCreateFactory: React.createFactory,\n      origCloneElement: React.cloneElement,\n      componentsMap: new WeakMap()\n    });\n    resetHooksPerRenderIfNeeded();\n    React.createElement = function (origType) {\n      var WDYRType = getWDYRType(origType);\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n      if (WDYRType) {\n        try {\n          var element = wdyrStore.origCreateElement.apply(React, [WDYRType].concat(rest));\n          if (wdyrStore.options.logOwnerReasons) {\n            storeOwnerData(element);\n          }\n          return element;\n        } catch (e) {\n          wdyrStore.options.consoleLog('whyDidYouRender error. Please file a bug at https://github.com/welldone-software/why-did-you-render/issues.', {\n            errorInfo: {\n              error: e,\n              componentNameOrComponent: origType,\n              rest: rest,\n              options: wdyrStore.options\n            }\n          });\n        }\n      }\n      return wdyrStore.origCreateElement.apply(React, [origType].concat(rest));\n    };\n    Object.assign(React.createElement, wdyrStore.origCreateElement);\n    React.createFactory = function (type) {\n      var factory = React.createElement.bind(null, type);\n      factory.type = type;\n      return factory;\n    };\n    Object.assign(React.createFactory, wdyrStore.origCreateFactory);\n    React.cloneElement = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      var element = wdyrStore.origCloneElement.apply(React, args);\n      if (wdyrStore.options.logOwnerReasons) {\n        storeOwnerData(element);\n      }\n      return element;\n    };\n    Object.assign(React.cloneElement, wdyrStore.origCloneElement);\n    trackHooksIfNeeded();\n    React.__REVERT_WHY_DID_YOU_RENDER__ = function () {\n      Object.assign(React, {\n        createElement: wdyrStore.origCreateElement,\n        createFactory: wdyrStore.origCreateFactory,\n        cloneElement: wdyrStore.origCloneElement\n      });\n      wdyrStore.componentsMap = null;\n      var hooksToRevert = [].concat(_toConsumableArray(Object.keys(hooksConfig).map(function (hookName) {\n        return [React, hookName];\n      })), _toConsumableArray(wdyrStore.options.trackExtraHooks));\n      hooksToRevert.forEach(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n          hookParent = _ref9[0],\n          hookName = _ref9[1];\n        if (hookParent[hookName].originalHook) {\n          hookParent[hookName] = hookParent[hookName].originalHook;\n        }\n      });\n      delete React.__REVERT_WHY_DID_YOU_RENDER__;\n      delete React.__IS_WDYR__;\n    };\n    return React;\n  }\n\n  whyDidYouRender.defaultNotifier = defaultNotifier;\n  whyDidYouRender.wdyrStore = wdyrStore;\n  whyDidYouRender.storeOwnerData = storeOwnerData;\n  whyDidYouRender.getWDYRType = getWDYRType;\n  Object.assign(whyDidYouRender, React__namespace);\n\n  return whyDidYouRender;\n\n}));\n//# sourceMappingURL=whyDidYouRender.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@welldone-software/why-did-you-render/dist/whyDidYouRender.js\n");

/***/ })

};
;